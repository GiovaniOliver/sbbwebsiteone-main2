// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id          String    @id @default(cuid())
  clerkId     String    @unique
  name        String
  username    String    @unique
  email       String    @unique
  avatar      String?
  bio         String?   @db.Text
  badges      String    @default("[]")
  isVerified  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  posts       Post[]
  comments    Comment[]
  likes       Like[]
  bookmarks   Bookmark[]
  followers   Follow[]  @relation("Following")
  following   Follow[]  @relation("Followers")
}

// Social Features
model Post {
  id          String    @id @default(cuid())
  content     String    @db.Text
  mediaUrl    String?
  type        PostType  @default(text)
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  likes       Like[]
  comments    Comment[]
  bookmarks   Bookmark[]
  shares      Int       @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([authorId])
}

enum PostType {
  text
  image
  video
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  postId    String
  userId    String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("CommentReplies")
  reactions CommentReaction[]

  @@index([postId])
  @@index([userId])
  @@index([parentId])
}

model Like {
  id        String    @id @default(cuid())
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  
  createdAt DateTime  @default(now())
  
  @@unique([postId, userId])
  @@index([userId])
}

model Bookmark {
  id        String    @id @default(cuid())
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  
  createdAt DateTime  @default(now())
  
  @@unique([postId, userId])
  @@index([userId])
}

model Follow {
  id          String    @id @default(cuid())
  follower    User      @relation("Following", fields: [followerId], references: [id])
  followerId  String
  following   User      @relation("Followers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime  @default(now())
  
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model CommentReaction {
  id        String   @id @default(cuid())
  type      String   // e.g., "like", "love", "laugh"
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  userId    String
  createdAt DateTime @default(now())

  @@unique([commentId, userId, type])
  @@index([commentId])
  @@index([userId])
} 